import sys

def read_statistics_file(file_path):
    """
    Read and parse statistics from a file generated by calc_average.py
    
    Args:
        file_path (str): Path to the statistics file
        
    Returns:
        list: List of float values in order: 
             [mean1, std1, mean2, std2, mean3, std3, mean4, std4]
        None: If file reading or parsing fails
    """
    try:
        with open(file_path, 'r') as file:
            line = file.readline().strip()
            if not line:
                print(f"Error: File {file_path} is empty")
                return None
                
            values = list(map(float, line.split()))
            if len(values) != 8:
                print(f"Error: File {file_path} does not contain exactly 8 values")
                return None
                
            return values
    except Exception as e:
        print(f"Error reading {file_path}: {str(e)}")
        return None

def calculate_percentage_difference(base_value, compare_value, is_latency_metric):
    """
    Calculate percentage difference between two values with appropriate sign based on metric type
    
    Args:
        base_value (float): Base value (denominator)
        compare_value (float): Value to compare against base
        is_latency_metric (bool): True if metric is latency (lower is better)
        
    Returns:
        tuple: (float percentage, str formatted percentage with sign)
    """
    if base_value == 0:
        return (0.0, "0.00%")
    
    # Calculate raw percentage difference
    percentage = ((compare_value - base_value) / base_value) * 100
    
    # Determine sign based on metric type and percentage
    if is_latency_metric:
        # For latency metrics: lower is better
        # Positive percentage (compare > base) → performance worse → "-" sign
        # Negative percentage (compare < base) → performance better → "+" sign
        if percentage > 0:
            sign = "-"
        elif percentage < 0:
            sign = "+"
        else:
            sign = ""
    else:
        # For RPS metrics: higher is better
        # Positive percentage (compare > base) → performance better → "+" sign
        # Negative percentage (compare < base) → performance worse → "-" sign
        if percentage > 0:
            sign = "+"
        elif percentage < 0:
            sign = "-"
        else:
            sign = ""
    
    # Format with absolute value and appropriate sign
    formatted = f"{sign}{abs(percentage):.2f}%"
    return (percentage, formatted)

def main():
    # Check if correct number of arguments is provided
    if len(sys.argv) != 3:
        print("Usage: python check_compare.py <base_file> <compare_file>")
        print("Example: python check_compare.py 1.log 2.log")
        sys.exit(1)
    
    base_file = sys.argv[1]
    compare_file = sys.argv[2]
    
    # Read statistics from both files
    base_stats = read_statistics_file(base_file)
    compare_stats = read_statistics_file(compare_file)
    
    if not base_stats or not compare_stats:
        sys.exit(1)
    
    # Define metric names and whether they are latency metrics (lower is better)
    metrics = [
        {"name": "Wakeup Latencies 99.0th", "is_latency": True},
        {"name": "Request Latencies 99.0th", "is_latency": True},
        {"name": "RPS 50.0th", "is_latency": False},
        {"name": "Average RPS", "is_latency": False}
    ]
    
    # Print header
    #print("Comparison Results (performance change):")
    #print(f"Base file: {base_file}")
    #print(f"Compare file: {compare_file}\n")
    print(f"{'Metric':<30} {'Base (mean±std)':<20} {'Compare (mean±std)':<20} {'Change':<10}")
    print("-" * 85)
    
    # Calculate and print results for each metric
    for i, metric in enumerate(metrics):
        # Extract mean and std values for current metric
        mean_index = i * 2
        std_index = mean_index + 1
        
        base_mean = base_stats[mean_index]
        compare_mean = compare_stats[mean_index]
        base_std = base_stats[std_index]
        compare_std = compare_stats[std_index]
        
        # Calculate percentage difference with appropriate sign
        _, diff_str = calculate_percentage_difference(
            base_mean, compare_mean, metric["is_latency"]
        )
        
        # Format output line
        metric_name = metric["name"]
        base_str = f"{base_mean:.2f}({base_std:.2f})"
        compare_str = f"{compare_mean:.2f}({compare_std:.2f})"
        
        print(f"{metric_name:<30} {base_str:<20} {compare_str:<20} {diff_str:<10}")

if __name__ == "__main__":
    main()
